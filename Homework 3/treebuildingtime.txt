TreeSet + Random Sorting or TreeSet + Sorted Data
Due to automatic balancing, this would be O(N Log N) in either case. This is shown in the timings as each doubling in the problem size shows a little more than double in the timings:
Enter the initial tree size: 10
Double until this size: 10000000
(T)reeSet or (B)inarySearchTree? T
(R)andom or (S)orted data? R
10 0
20 0
40 0
80 0
160 1
320 1
640 2
1280 2
2560 2
5120 2
10240 5
20480 7
40960 11
81920 23
163840 58
327680 147
655360 417
1310720 1083
2621440 2347
5242880 6209

BST+Random
This would be O(N Log N) because random data ensures that the tree is not built in one long line. This is shown in the timings because each iteration is a bit more than double the previous.
Enter the initial tree size: 10
Double until this size: 10000000
(T)reeSet or (B)inarySearchTree? B
(R)andom or (S)orted data? R
10 0
20 0
40 1
80 0
160 1
320 0
640 1
1280 1
2560 1
5120 2
10240 4
20480 7
40960 11
81920 22
163840 51
327680 145
655360 419
1310720 974
2621440 2494
5242880 6414

BST + Sorted
In the case of sorted data, the BST will produce O(N^2) because the data will form an unbalanced chain. This is shown in the timings as each double in problem size results in a double of timing:

Enter the initial tree size: 10
Double until this size: 1000000
(T)reeSet or (B)inarySearchTree? B
(R)andom or (S)orted data? S
10 0
20 0
40 0
80 1
160 1
320 2
640 5
1280 10
2560 35
5120 142
10240 546
20480 2134
40960 8299
Exception in thread "main" java.lang.StackOverflowError
	at BinarySearchTree.add(BinarySearchTree.java:25)
	at BinarySearchTree.add(BinarySearchTree.java:25)
	at BinarySearchTree.add(BinarySearchTree.java:25)
	at BinarySearchTree.add(BinarySearchTree.java:25)
	at BinarySearchTree.add(BinarySearchTree.java:25)
	at BinarySearchTree.add(BinarySearchTree.java:25)
	at BinarySearchTree.add(BinarySearchTree.java:25)

This gets so large that it eventually crashes.

///////////////////////////////// AFTER CHANGES ///////////////////////////////////////////

TreeSet - for both Random and Sorted data - will remain the same since no changes were made to that structure.

BST + Random
Due to the changes that we made, but storing the height and weight in the node O(1), converting the tree into a list, and then rebalancing when things were too uneven, this new method performs slightly better with the timings a little bit more than doubling whenever the size of the problem doubles.
Enter the initial tree size: 10
Double until this size: 10000000
(T)reeSet or (B)inarySearchTree?  b
(R)andom or (S)orted data? r
10 13
20 0
40 0
80 0
160 0
320 1
640 0
1280 0
2560 1
5120 1
10240 3
20480 4
40960 10
81920 17
163840 46
327680 86
655360 215
1310720 491
2621440 1567
5242880 4502

BST + Sorted
After the changes, sorted data is handled much more effectively, and the program now has a fighting chance to complete, albeit pretty slowly. The timings for this are n^2/log(n), which is because the data has to be rebalanced much more frequently.
(T)reeSet or (B)inarySearchTree? B
(R)andom or (S)orted data? S
10 11
20 0
40 0
80 1
160 0
320 1
640 1
1280 3
2560 12
5120 19
10240 69
20480 432
40960 548
81920 2256
163840 7585
327680 29353
655360 107705
